
networks:
  TransNetwork:
    name: "TransNetwork"

volumes:
  images:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "./images"

  users-data:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "/tmp/users_data"
  api-data:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "/tmp/api_data"
  auth_redis_data:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "/tmp/auth_redis_data"
  api_redis_data:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "/tmp/api_redis_data"
  redisinsight_data:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "/tmp/redisinsight"
  frontend-volume:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "./frontend/public"
  auth-service-code:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "./auth_build/auth_service"
  api-service-code:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "./api_build/api_service"
  postgres_data:
    driver: local
  redis_data:
    driver: local

  portainer_data:

  match-code:
    driver: local
    driver_opts:
      o: "bind"
      type: "none"
      device: "./match_making/match_service"

services:
  users-db:
    image: postgres
    container_name: users_db
    networks:
      - TransNetwork
    volumes:
      - users-data:/var/lib/postgresql/data
    env_file:
      - "auth_build/build/conf/.env"
  
  auth-service:
    build: "auth_build/."
    pull_policy: build
    image: auth_service:latest
    container_name: auth_service
    networks:
      - TransNetwork
    depends_on:
      - users-db
      - auth-redis
      - api-service
    env_file:
      - "auth_build/build/conf/.env"
    volumes:
      - "auth-service-code:/var/app"
      - "images:/var/images"


  chat-service:
    build: "chat_service/."
    pull_policy: build
    image: "chat_image:latest"
    container_name: chat_service
    networks:
      - TransNetwork
    depends_on:
      - redis
      - postgres
      - auth-service
      - rabbitmq
    volumes:
      - "./chat_service:/chatco"

  redis:
    image: redis:latest
    container_name: 'redis'
    ports:
      - "6379:6379"  # Expose Redis on the default port 6379
    networks:
      - TransNetwork
    volumes:
      - redis_data:/data  # Persist Redis data

  postgres:
    image: postgres:13
    container_name: postgres
    networks:
      - TransNetwork
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=your_database_name
      - POSTGRES_USER=your_database_user
      - POSTGRES_PASSWORD=your_database_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  api-service:
    build: "api_build/."
    pull_policy: build
    image: api_service:latest
    container_name: api_service
    networks:
      - TransNetwork
    depends_on:
      - rabbitmq
      - api-db
      - api-redis
    volumes:
      - "api-service-code:/var/app/"
    env_file:
      - "api_build/build/conf/.env"


  api-db:
    image: postgres
    container_name: api_db
    networks:
      - TransNetwork
    volumes:
      - api-data:/var/lib/postgresql/data
    env_file:
      - "api_build/build/conf/.env"

  api-redis:
    build: "api_redis"
    pull_policy: build
    image: api_redis
    container_name: api_redis
    networks:
      - TransNetwork
    volumes:
      - "api_redis_data:/data"

  rabbitmq:
    image: rabbitmq:4.0.5-management
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - TransNetwork

  nginx:
    image: nginx:latest
    pull_policy: build
    build: "nginx/."
    container_name: nginx_reverse
    ports:
      - 8000:80
    depends_on:
      - auth-service
      - adminer
      - api-service
      - match-service
    networks:
      - TransNetwork    
    volumes:
      - "images:/var/images"

  adminer:
    image: adminer
    container_name: adminer_inspect
    networks:
      - TransNetwork
    depends_on:
      - users-db
    env_file:
     - adminer/.env
  
  auth-redis:
    build: "auth_redis"
    pull_policy: build
    image: auth_redis_image
    container_name: auth_redis
    networks:
      - TransNetwork
    volumes:
      - "auth_redis_data:/data"

  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight:latest
    networks:
      - TransNetwork
    ports:
      - 5540:5540
    depends_on:
      - auth-redis
    volumes:
      - "redisinsight_data:/data"

  frontend:
    container_name: frontend
    build : "frontend/."
    image: frontend:latest
    pull_policy: build
    networks:
      - TransNetwork
    init : true # handle signals for node js container, look gitub issue for node concerning pid 1
    depends_on:
      - auth-service
    volumes:
      - "frontend-volume:/app/src"

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    ports:
      - 9000:9000
  
  match-service:
    container_name: match_service
    image: match_image
    pull_policy: build
    build: "match_making/."
    networks:
      - TransNetwork
    volumes:
      - "match-code:/var/app"
    depends_on:
      - auth-service
      - redis-queue

  redis-queue:
    build: "redis_queue/."
    pull_policy: build
    image: redis_queue
    container_name: redis_queue
    networks:
      - TransNetwork
